name: k3s-test-matrix

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - master
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  kubernetes:
    name: k3s-test-${{ matrix.k3s }}
    #runs-on: ${{ matrix.os }}
    runs-on: [actuated-4cpu-8gb]

    strategy:
      # max-parallel: 1
      matrix:
        # k3s: [v1.20, v1.21, v1.22, v1.23, v1.24,v1.25, v1.26, v1.27, v1.28, v1.29]
        # k3s: [ v1.27, v1.28, v1.29, v1.30, v1.31 ]
        k3s: [v1.31]

        #os: [actuated-arm64-4cpu-8gb,actuated-4cpu-8gb]
# Anything under v1.20 requires Ubuntu 20.04 due to a cgroups v1 requirement. 
#        k3s: [v1.16, v1.17,v1.18,v1.19]
    steps:
# vmmeter start
      - uses: alexellis/setup-arkade@master
      # - uses: self-actuated/vmmeter-action@master
# vmmeter end

      - uses: actions/checkout@v4
      - name: Setup mirror
        uses: self-actuated/hub-mirror@master
      - uses: alexellis/arkade-get@master
        with:
          print-summary: false
          kubectl: latest
          k3sup: latest

      - name: Create Kubernetes ${{ matrix.k3s }} cluster ( ${{ matrix.os }} )
        run: |
          mkdir -p $HOME/.kube/
          k3sup install \
            --local \
            --k3s-channel ${{ matrix.k3s }} \
            --local-path $HOME/.kube/config \
            --merge \
            --context default
          cat $HOME/.kube/config

      - name: Wait until K3s ${{ matrix.k3s }} is ready
        run: |
          k3sup ready --context default --pause 5s
          kubectl config use-context default
          
      - name: Wait until all Kubernetes nodes are ready ${{ matrix.k3s }}
        run: |
          # Just an extra test on top.
          echo "Waiting for nodes to be ready ..."
          kubectl wait --for=condition=Ready nodes --all --timeout=5m
          kubectl get nodes -o wide
          
      - name: Apply CRD
        run: |
          echo "Applying CRD"
          kubectl apply -f https://raw.githubusercontent.com/openfaas/faas-netes/master/artifacts/crds/openfaas.com_functions.yaml
      - name: Expose nginx with svclb
        run: |
          kubectl run nginx-1 --image=nginx --port=8080 --restart=Always
          kubectl expose pod/nginx-1 --port=8080 --type=LoadBalancer
      - name: Look for svclb
        run: |
          sleep 10
          kubectl get pod -n kube-system -o wide
          kubectl get pod  -n kube-system -l svccontroller.k3s.cattle.io/svcname=nginx
          kubectl get pods -n kube-system -l svccontroller.k3s.cattle.io/svcname

      - name: Show k3s logs
        if: always()
        run: |
          sudo systemctl status k3s --no-pager -l || :
          sudo journalctl -u k3s --no-pager || :
